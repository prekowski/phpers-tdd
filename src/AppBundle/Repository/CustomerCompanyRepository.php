<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Country;
use AppBundle\Entity\CustomerCompany;
use AppBundle\Entity\CustomerContact;
use AppBundle\Service\CustomerService;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * CustomerCompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerCompanyRepository extends EntityRepository
{
    /**
     * @param int             $eosId
     * @param CustomerContact $contact
     * @param Country         $country
     *
     * @return CustomerCompany
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findCompanyBySystemIdAccountAndContact($eosId, CustomerContact $contact, Country $country)
    {
        return $this->createQueryBuilder('company')
            ->select('company')
            ->innerJoin('company.customerContact', 'contact')
            ->innerJoin('company.country', 'country')
            ->where('company.eosId = :id')
            ->andWhere('contact.id = :contact_id')
            ->andWhere('country.id = :country_id')
            ->setParameter(':id', $eosId)
            ->setParameter(':contact_id', $contact->getId())
            ->setParameter(':country_id', $country->getId())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param int $systemId
     *
     * @return int affected rows
     */
    public function inactivateCompanyBySystemId($systemId)
    {
        $query = $this
            ->createQueryBuilder('cc')
            ->update()
            ->set('cc.status', CustomerCompany::STATUS_INACTIVE)
            ->where('cc.systemId = :systemId')
            ->setParameter('systemId', $systemId);

        return $query->getQuery()->execute();
    }

    /**
     * @param int             $id
     * @param CustomerContact $contact
     * @param Country         $country
     *
     * @return CustomerCompany
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findCompanyByIdAndAccountAndContact($id, CustomerContact $contact, Country $country)
    {
        return $this->createQueryBuilder('company')
            ->select('company')
            ->innerJoin('company.customerContact', 'contact')
            ->innerJoin('company.country', 'country')
            ->where('company.id = :id')
            ->andWhere('contact.id = :contact_id')
            ->andWhere('country.id = :country_id')
            ->setParameter(':id', $id)
            ->setParameter(':contact_id', $contact->getId())
            ->setParameter(':country_id', $country->getId())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param string          $email
     * @param CustomerContact $contact
     * @param Country         $country
     *
     * @return CustomerCompany
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findCompanyByEmailAndContact($email, CustomerContact $contact, Country $country)
    {
        return $this->createQueryBuilder('company')
            ->select('company')
            ->innerJoin('company.customerType', 'type')
            ->innerJoin('company.customerContact', 'contact')
            ->innerJoin('company.country', 'country')
            ->where('company.email = :email')
            ->andWhere('contact.id = :contact_id')
            ->andWhere('country.id = :country_id')
            ->andWhere('type.id = :type_id')
            ->setParameter(':email', $email)
            ->setParameter(':contact_id', $contact->getId())
            ->setParameter(':country_id', $country->getId())
            ->setParameter(':type_id', CustomerService::CUSTOMER_TYPE_PF)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param string          $name
     * @param CustomerContact $contact
     * @param Country         $country
     *
     * @return CustomerCompany
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findCompanyByNameAndContact($name, CustomerContact $contact, Country $country)
    {
        return $this->createQueryBuilder('company')
            ->select('company')
            ->innerJoin('company.customerType', 'type')
            ->innerJoin('company.customerContact', 'contact')
            ->innerJoin('company.country', 'country')
            ->where('company.name = :name')
            ->andWhere('contact.id = :contact_id')
            ->andWhere('country.id = :country_id')
            ->andWhere('type.id = :type_id')
            ->setParameter(':name', $name)
            ->setParameter(':contact_id', $contact->getId())
            ->setParameter(':country_id', $country->getId())
            ->setParameter(':type_id', CustomerService::CUSTOMER_TYPE_PF)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param string  $fiscalCode
     * @param Country $country
     * @param bool    $getQuery
     *
     * @return CustomerCompany|QueryBuilder
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findCompanyByFiscalCode($fiscalCode, Country $country, $getQuery = false)
    {
        $query = $this->createQueryBuilder('company')
            ->select('company')
            ->innerJoin('company.customerType', 'type')
            ->innerJoin('company.country', 'country')
            ->where('company.fiscalCode = :fiscalCode')
            ->andWhere('country.id = :country_id')
            ->andWhere('type.id != :type_id')
            ->setParameter(':fiscalCode', $fiscalCode)
            ->setParameter(':country_id', $country->getId())
            ->setParameter(':type_id', CustomerService::CUSTOMER_TYPE_PF);

        if ($getQuery) {
            return $query;
        } else {
            return $query->setMaxResults(1)
                ->getQuery()
                ->getOneOrNullResult();
        }
    }

    /**
     * @param string          $fiscalCode
     * @param CustomerContact $contact
     * @param Country         $country
     *
     * @return CustomerCompany
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findCompanyByFiscalCodeAndContact($fiscalCode, CustomerContact $contact, Country $country)
    {
        return $this->findCompanyByFiscalCode($fiscalCode, $country, true)
            ->innerJoin('company.customerContact', 'contact')
            ->andWhere('contact.id = :contact_id')
            ->setParameter(':contact_id', $contact->getId())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

}
